pragma solidity 0.4.24;

import "./ERC777Token.sol";
import "./ExtendedERC777Token.sol";
import "./ERC777TokenBase.sol";


contract ExtendedERC777TokenBase is ERC777TokenBase, ExtendedERC777Token {


  /* -- Constructor -- */
  //
  /// @notice Constructor to create a ReferenceToken
  /// @param _name Name of the new token
  /// @param _symbol Symbol of the new token.
  /// @param _granularity Minimum transferable chunk.
  constructor(
    string _name,
    string _symbol,
    uint256 _granularity
  )
    public ERC777TokenBase(_name, _symbol, _granularity)
  {
    setInterfaceImplementation("ExtendedERC777Token", this);
    // and delegate constructor
  }

  /// @notice Extended ERC777 function to allow `msg.sender` approves `_spender` to spend `_amount`
  /// tokens on its behalf.
  /// @param _operator (AKA spender)The address of the account able to transfer the tokens
  /// @param _amount The number of tokens to be approved for transfer
  /// @param _userData data to be passed from the user to the operator/spender for use/execution
  /// @return `true`, if the approve can't be done, it should fail.
  function approveAndCall(address _operator, uint256 _amount, bytes _userData) external returns (bool success) {
    approve(_operator, _amount);
    callOperator(
      _operator,
      msg.sender,
      _operator,
      _amount,
      _userData,
      "0x0",
      false
    );
    return true;
  }

  /// @notice Helper function that checks for ERC777TokensOperator on the recipient and calls it.
  ///  May throw according to `_preventLocking`
  /// @param _from The address holding the tokens being sent
  /// @param _to The address of the recipient
  /// @param _value The amount of tokens to be sent
  /// @param _userData Data generated by the user to be passed to the recipient
  /// @param _operatorData Data generated by the operator to be passed to the recipient
  /// @param _preventLocking `true` if you want this function to throw when tokens are sent to a contract not
  ///  implementing `ERC777TokensOperator`
  ///  ERC777 native Send functions MUST set this parameter to `true`, and backwards compatible ERC20 transfer
  ///  functions SHOULD set this parameter to `false`.
  function callOperator(
    address _operator,
    address _from,
    address _to,
    uint256 _value,
    bytes _userData,
    bytes _operatorData,
    bool _preventLocking
  ) private {
    address recipientImplementation = interfaceAddr(_to, "ERC777TokensOperator");
    if (recipientImplementation != 0) {
      ERC777TokensOperator(recipientImplementation).madeOperatorForTokens(
      _operator,
      _from,
      _to,
      _value,
      _userData,
      _operatorData
      );
    } else if (_preventLocking) {
      require(isRegularAddress(_to), "The recipient contract does not support this token.");
    }
  }
}